writeTable(y2.f$samples, "samples_keep.f.0.txt")
# Make MDS plot and cluster dendrogram
plotMDS(y2,labels=colnames(y2$counts),col=cols,las=1)
plotMDS(y2.m,labels=colnames(y2.m$counts),col=cols[(cols==cm.col | cols==dm.col)],las=1)
plotMDS(y2.f,labels=colnames(y2.f$counts),col=cols[(cols==cf.col | cols==df.col)],las=1)
plotMDS(y2,col=cols,las=1,pch=y.sym)
plotMDS(y2.m,col=cols[(cols==cm.col | cols==dm.col)],las=1,pch=y.sym)
plotMDS(y2.f,col=cols[(cols==cf.col | cols==df.col)],las=1,pch=y.sym)
y2.clust<-hclust(dist(t(cpm(y2))))
y2.m.clust<-hclust(dist(t(cpm(y2.m))))
y2.f.clust<-hclust(dist(t(cpm(y2.f))))
plot(y2.clust)
plot(y2.m.clust)
plot(y2.f.clust)
# normalise library sizes
y3 <-calcNormFactors(y2)
y3.m <-calcNormFactors(y2.m)
y3.f <-calcNormFactors(y2.f)
# Make MDS plot and cluster dendrogram
plotMDS(y3,labels=colnames(y3$counts),col=cols,las=1)
plotMDS(y3.m,labels=colnames(y3.m$counts),col=cols[(cols==cm.col | cols==dm.col)],las=1)
plotMDS(y3.f,labels=colnames(y3.f$counts),col=cols[(cols==cf.col | cols==df.col)],las=1)
plotMDS(y3,col=cols,las=1,pch=y.sym)
plotMDS(y3.m,col=cols[(cols==cm.col | cols==dm.col)],las=1,pch=y.sym)
plotMDS(y3.f,col=cols[(cols==cf.col | cols==df.col)],las=1,pch=y.sym)
y3.clust<-hclust(dist(t(cpm(y3))))
y3.m.clust<-hclust(dist(t(cpm(y3.m))))
y3.f.clust<-hclust(dist(t(cpm(y3.f))))
plot(y3.clust)
plot(y3.m.clust)
plot(y3.f.clust)
# perform DE test
y3 <- estimateDisp(y3)
et <- exactTest(y3, c("C", "D"))
topTags(et)
y3.m <- estimateDisp(y3.m)
et.m <- exactTest(y3.m, c("CM", "DM"))
topTags(et.m)
y3.f <- estimateDisp(y3.f)
et.f <- exactTest(y3.f, c("CF", "DF"))
topTags(et.f)
# write results to file
results <- topTags(et, n=dim(y3)[1]+1, adjust.method = "BH",sort.by = "PValue")
writeTable(results, "results.txt")
writeTable(cpm(y3), "cpm.txt")
writeTable(cpm(y3,log=TRUE), "cpm.log2.txt")
writeTable(y3$samples, "samples_norm.txt")
results.m <- topTags(et.m, n=dim(y3.m)[1]+1, adjust.method = "BH",sort.by = "PValue")
writeTable(results.m, "results.m.txt")
writeTable(cpm(y3.m), "cpm.m.txt")
writeTable(cpm(y3.m,log=TRUE), "cpm.log2.m.txt")
writeTable(y3.m$samples, "samples_norm.m.txt")
results.f <- topTags(et.f, n=dim(y3.f)[1]+1, adjust.method = "BH",sort.by = "PValue")
writeTable(results.f, "results.f.txt")
writeTable(cpm(y3.f), "cpm.f.txt")
writeTable(cpm(y3.f,log=TRUE), "cpm.log2.f.txt")
writeTable(y3.f$samples, "samples_norm.f.txt")
# create plots
plotBCV(y3)
plotBCV(y3.m)
plotBCV(y3.f)
de<-decideTestsDGE(et,p.value=0.05,lfc=0.6)
detags<-rownames(y3)[as.logical(de)]
plotSmear(et, de.tags=detags)
abline(h=c(-0.6,0.6), col="blue")
de.m<-decideTestsDGE(et.m,p.value=0.05,lfc=0.6)
detags.m<-rownames(y3.m)[as.logical(de.m)]
plotSmear(et.m, de.tags=detags.m)
abline(h=c(-0.6,0.6), col="blue")
de.f<-decideTestsDGE(et.f,p.value=0.05,lfc=0.6)
detags.f<-rownames(y3.f)[as.logical(de.f)]
plotSmear(et.f, de.tags=detags.f)
abline(h=c(-0.6,0.6), col="blue")
# Create labels for groups
# sampleLabs = colnames(y3$counts)
# sampleLabs = lapply(sampleLabs, function(x) substring(x, first = 2))
# newLabs = paste(groups, sampleLabs, sep = "_")
sampleNums = groups#c("DF","CF","CF","CF","DF","DF","CF","DF","CM","DM","CM","CM","DM","CM","DM","CM")
sampleNums[sampleNums=="DF"] = 1:5
sampleNums[sampleNums=="CF"] = 1:5
sampleNums[sampleNums=="DM"] = 1:5
sampleNums[sampleNums=="CM"] = 1:5
sampleNums
newLabs = paste(groups, sampleNums, sep = "_")
newLabs
newLabs.m = newLabs[(groups == "DM" | groups == "CM")]
newLabs.f = newLabs[(groups == "DF" | groups == "CF")]
sampleLabs = colnames(y3$counts)
newLabs.2 = paste(lapply(sampleLabs, function(x) substring(x, first = 4, last = 5)), lapply(groups, function(x) substring(x, first = 1, last = 1)), sep = "_")
newLabs.2
newLabs.2.m = newLabs.2[(groups == "DM" | groups == "CM")]
newLabs.2.f = newLabs.2[(groups == "DF" | groups == "CF")]
library(RColorBrewer)
y3.data<-cpm(y3,log=TRUE)
y3.data.sort<-y3.data[order(match(row.names(y3.data), row.names(topTags(et, n=dim(y3)[1]+1, adjust.method = "BH",sort.by = "PValue")))),]
colnames(y3.data.sort) <- newLabs
col.brew<-rev(colorRampPalette(brewer.pal(8,"RdYlBu"))(25))
#heatmap(y3.data.sort[nrow(y3.data.sort):1,], col=col.brew, labCol = newLabs, cexCol = 0.5)
heatmap(y3.data.sort[34:1,], col=col.brew, labCol = newLabs.2, cexCol = 0.5, cexRow = 0.5)
# MALES
y3.m.data<-cpm(y3.m,log=TRUE)
y3.m.data.sort<-y3.m.data[order(match(row.names(y3.m.data), row.names(topTags(et.m, n=dim(y3.m)[1]+1, adjust.method = "BH",sort.by = "PValue")))),]
colnames(y3.m.data.sort) <- newLabs.m
#heatmap(y3.m.data.sort[nrow(y3.m.data.sort):1,], col=col.brew, labCol = newLabs, cexCol = 0.5)
heatmap(y3.m.data.sort[25:1,], col=col.brew, labCol = newLabs.2.m, cexCol = 0.5)
# FEMALES
y3.f.data<-cpm(y3.f,log=TRUE)
y3.f.data.sort<-y3.f.data[order(match(row.names(y3.f.data), row.names(topTags(et.f, n=dim(y3.f)[1]+1, adjust.method = "BH",sort.by = "PValue")))),]
colnames(y3.f.data.sort) <- newLabs.f
#heatmap(y3.f.data.sort[nrow(y3.f.data.sort):1,], col=col.brew, labCol = newLabs, cexCol = 0.5)
heatmap(y3.f.data.sort[26:1,], col=col.brew, labCol = newLabs.2.f, cexCol = 0.5, cexRow = 0.5)
library(pheatmap)
sig.genes <- results$table[results$table$FDR < 0.05, ]
sig.gene.ids <- rownames(sig.genes)
sig.gene.cpm <- cpm(y3)[sig.gene.ids, ]
sig.gene.cpm.mat <- as.matrix(sig.gene.cpm)
p <- pheatmap(sig.gene.cpm.mat, cluster_cols = TRUE, scale = "row", clustering_method = "complete", cutree_rows = 2, angle_col = 45, show_rownames = FALSE)
p
sig.genes.m <- results.m$table[results.m$table$FDR < 0.05, ]
sig.gene.ids.m <- rownames(sig.genes.m)
sig.gene.cpm.m <- cpm(y3.m)[sig.gene.ids.m, ]
sig.gene.cpm.mat.m <- as.matrix(sig.gene.cpm.m)
p.m <- pheatmap(sig.gene.cpm.mat.m, cluster_cols = TRUE, scale = "row", clustering_method = "complete", cutree_rows = 2, angle_col = 45, show_rownames = FALSE)
p.m
sig.genes.f <- results.f$table[results.f$table$FDR < 0.05, ]
sig.gene.ids.f <- rownames(sig.genes.f)
sig.gene.cpm.f <- cpm(y3.f)[sig.gene.ids.f, ]
sig.gene.cpm.mat.f <- as.matrix(sig.gene.cpm.f)
p.f <- pheatmap(sig.gene.cpm.mat.f, cluster_cols = TRUE, scale = "row", clustering_method = "complete", cutree_rows = 2, angle_col = 45, show_rownames = FALSE)
p.f
p
# MALES
sig.genes.m <- results.m$table[results.m$table$FDR < 0.05, ]
p <- pheatmap(sig.gene.cpm.mat, cluster_cols = TRUE, scale = "row", clustering_method = "complete", cutree_rows = 2, angle_col = 45, show_rownames = FALSE)
p
# MALES
sig.genes.m <- results.m$table[results.m$table$FDR < 0.05, ]
colnames(sig.gene.cpm.mat)
colnames(sig.gene.cpm.mat) <- newLabs.2
p <- pheatmap(sig.gene.cpm.mat, cluster_cols = TRUE, scale = "row", clustering_method = "complete", cutree_rows = 2, angle_col = 45, show_rownames = FALSE)
p <- pheatmap(sig.gene.cpm.mat, cluster_cols = TRUE, scale = "row", clustering_method = "complete", cutree_rows = 2, angle_col = 45, show_rownames = TRUE)
sig.genes.f <- results.f$table[results.f$table$FDR < 0.05, ]
sig.gene.ids.f <- rownames(sig.genes.f)
sig.gene.cpm.f <- cpm(y3.f)[sig.gene.ids.f, ]
sig.gene.cpm.mat.f <- as.matrix(sig.gene.cpm.f)
colnames(sig.gene.cpm.mat) <- newLabs.2
p.f <- pheatmap(sig.gene.cpm.mat.f, cluster_cols = TRUE, scale = "row", clustering_method = "complete", cutree_rows = 2, angle_col = 45, show_rownames = TRUE)
p.f
results.m$table[order(results.m$table$FDR), ]
dim(results.m)
dim(results)
# MALES
sig.genes.m <- results.m$table[order(results.m$table$FDR), ][1:25,]
sig.genes.m
sig.gene.ids.m <- rownames(sig.genes.m)
sig.gene.cpm.m <- cpm(y3.m)[sig.gene.ids.m, ]
sig.gene.cpm.mat.m <- as.matrix(sig.gene.cpm.m)
colnames(sig.gene.cpm.mat) <- newLabs.2
p.m <- pheatmap(sig.gene.cpm.mat.m, cluster_cols = TRUE, scale = "row", clustering_method = "complete", cutree_rows = 2, angle_col = 45, show_rownames = TRUE)
p.m
colnames(sig.gene.cpm.mat) <- newLabs.2.m
sig.genes <- results$table[results$table$FDR < 0.05, ]
sig.gene.ids <- rownames(sig.genes)
sig.gene.cpm <- cpm(y3)[sig.gene.ids, ]
sig.gene.cpm.mat <- as.matrix(sig.gene.cpm)
colnames(sig.gene.cpm.mat) <- newLabs.2
p <- pheatmap(sig.gene.cpm.mat, cluster_cols = TRUE, scale = "row", clustering_method = "complete", cutree_rows = 2, angle_col = 45, show_rownames = TRUE)
p
# MALES
sig.genes.m <- results.m$table[order(results.m$table$FDR), ][1:25,]
sig.gene.ids.m <- rownames(sig.genes.m)
sig.gene.cpm.m <- cpm(y3.m)[sig.gene.ids.m, ]
sig.gene.cpm.mat.m <- as.matrix(sig.gene.cpm.m)
colnames(sig.gene.cpm.mat.m) <- newLabs.2.m
p.m <- pheatmap(sig.gene.cpm.mat.m, cluster_cols = TRUE, scale = "row", clustering_method = "complete", cutree_rows = 2, angle_col = 45, show_rownames = TRUE)
p.m
# FEMALES
sig.genes.f <- results.f$table[results.f$table$FDR < 0.05, ]
sig.gene.ids.f <- rownames(sig.genes.f)
sig.gene.cpm.f <- cpm(y3.f)[sig.gene.ids.f, ]
sig.gene.cpm.mat.f <- as.matrix(sig.gene.cpm.f)
colnames(sig.gene.cpm.mat.f) <- newLabs.2.f
p.f <- pheatmap(sig.gene.cpm.mat.f, cluster_cols = TRUE, scale = "row", clustering_method = "complete", cutree_rows = 2, angle_col = 45, show_rownames = TRUE)
p.f
png("heatmap.p.png", width=1400, height=1400); p; dev.off()
png("heatmap.p.png", width=1400, height=1400, res = 600); p; dev.off()
png("heatmap.p.png", width=1400, height=1400, res = 300); p; dev.off()
png("heatmap.p.png", width=6, height=10, res = 600, units = "in"); p; dev.off()
png("heatmap.p.m.png", width=6, height=10, res = 600, units = "in"); p.m; dev.off()
png("heatmap.p.f.png", width=6, height=10, res = 600, units = "in"); p.f; dev.off()
save.image("~/Documents/Projects/UQ smRNA Sequencing/edgeR-pw/uq-smrna-edger-0.RData")
BiocManager::install("miRmine")
library("miRmine")
list.files(system.file("extdata", packages = "miRmine"))
data(miRmine)
miRmine
miRmine[1]
miRmine[2]
miRmine[3]
miRmine[1]
miRmine
miRmine[, miRmine$Tissue]
miRmine$Tissue
miRmine$Tissue == 'Brain'
miRmine[,miRmine$Tissue == 'Brain']
miRmine[,miRmine$Tissue == 'Brain']$Sample.Accession
head(miRmine)
?assay
?assays
assays(miRmine[, miRmine$Tissue == "Brain"])$counts
miRmine[, miRmine$Tissue == "Brain"]
miRmine$Tissue
colnames(miRmine[, miRmine$Tissue == "Brain"])
colnames(miRmine[, miRmine$Tissue == "Brain"])[1]
colnames(miRmine[, miRmine$Cell.Line == "SH-SY5Y"])
miRmine[, miRmine$Tissue == "Brain"]$PubMed.ID
miRmine$Tissue == "Brain"
miRmine(miRmine$Tissue == "Brain")
miRmine[(]miRmine$Tissue == "Brain"]
miRmine[miRmine$Tissue == "Brain"]
assays(miRmine[(]miRmine$Tissue == "Brain"])
assays(miRmine[(]miRmine$Tissue == "Brain"])$counts
assays(miRmine[miRmine$Tissue == "Brain"])
assays(miRmine[miRmine$Tissue == "Brain"])$counts
assays(miRmine)$counts
miRmine[, miRmine$Tissue == "Brain"]
miRmine$Description
miRmine$Description[miRmine$Tissue=="Brain"]
miRmine$PubMed.ID[miRmine$Tissue=="Brain"]
library(biomaRt)
ensembl <- useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl', host = 'http://grch37.ensembl.org')
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'ensembl_gene_name'), mart = ensembl)
listAttributes(ensembl)
listAttributes(ensembl)[1]
grepl("name", listAttributes(ensembl)[1])
grep("name", listAttributes(ensembl)[1])
head(listAttributes(ensembl)[1])
as.character(listAttributes(ensembl)[1])
as.vector(listAttributes(ensembl)[1])
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'gene_name'), mart = ensembl)
c(listAttributes(ensembl)[1])
grep("gene_name", c(listAttributes(ensembl)[1]))
grep("gene_name", unlist(listAttributes(ensembl)[1]))
unlist(listAttributes(ensembl)[1])[grep("gene_name", unlist(listAttributes(ensembl)[1]))]
listAttributes(ensembl)[grep("gene_name", unlist(listAttributes(ensembl)[1])),]
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'external_gene_name'), mart = ensembl)
head(bm)
bm[bm$external_gene_name=="DGCR8",]
write.table(bm, "bm.gene.trans.id.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
library(biomaRt)
ensembl <- useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl', host = 'http://grch37.ensembl.org')
listAttributes(ensembl)
listAttributes(ensembl)[1]
'dbsnp' %in% listAttributes(ensembl)[1]
'dbSNP' %in% listAttributes(ensembl)[1]
'variant' %in% listAttributes(ensembl)[1]
'rsid %in% listAttributes(ensembl)[1]
'rsid' %in% listAttributes(ensembl)[1]
'rsid' %in% listAttributes(ensembl)[1]
library(biomaRt)
ensembl <- useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl', host = 'http://grch37.ensembl.org')
listAttributes(ensembl)
att <- listAttributes(ensembl)
att[grepl("[Pp]rotein", att$description, perl = TRUE), ]
att[grepl("[Pp]rotein|[Cc]oding", att$description, perl = TRUE), ]
att[grepl("transcript_type", att$description, perl = TRUE), ]
att[grepl("transcript", att$description, perl = TRUE), ]
att[grepl("type", att$description, perl = TRUE), ]
att[grepl("[Tt]ype", att$description, perl = TRUE), ]
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'transcript_biotype'), mart = ensembl)
head(bm)
bm <- bm[bm$transcript_biotype=='protein_coding',]
View(bm)
library(biomaRt)
ensembl <- useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl', host = 'http://grch37.ensembl.org')
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'transcript_biotype'), mart = ensembl)
bm.all <- bm
bm <- bm[bm$transcript_biotype=='protein_coding',]
# head(bm)
write.table(bm, "bm.gene.trans.id.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = '\t')
write.table(bm, "bm.gene.trans.id.all.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = '\t')
?rbeta
rbeta(1000, 0.5, 0.5)
dist(rbeta(1000, 0.5, 0.5))
hist(rbeta(1000, 0.5, 0.5))
hist(rbeta(1000, 1, 25))
?hist
hist(rbeta(10000, 1, 25))
hist(rbeta(10000, 1, 25), breaks = 50)
hist(rbeta(10000, 1, 25), breaks = 500)
hist(rbeta(100000, 1, 25), breaks = 500)
hist(rbeta(100000, 1, 1), breaks = 500)
hist(rbeta(100000, 1, 2), breaks = 500)
hist(rbeta(100000, 1, 200), breaks = 500)
hist(rbeta(100000, 1, 0.5), breaks = 500)
hist(rbeta(100000, 25, 25), breaks = 500)
dbeta(1000, 1, 25)
dbeta(0.01, 1, 25)
dbeta(0.001, 1, 25)
dbeta(0.000001, 1, 25)
dbeta(0.00000000001, 1, 25)
dbeta(0.00000000001, 1, 2)
dbeta(0.000001, 1, 0.5)
dbeta(0.000001, 0.5, 0.5)
dbeta(0.0000000001, 0.5, 0.5)
dbeta(0.0000000000000001, 0.5, 0.5)
hist(rbeta(100000, 25, 25), breaks = 500)
hist(rbeta(100000, 1, 25), breaks = 500)
dbeta(1, 1, 25)
dbeta(0, 1, 25)
dbeta(0, 1, 1)
dbeta(0, 1, 0.9)
dbeta(0, 1, 0.5)
dbeta(0.1, 1, 0.5)
dbeta(0.00000001, 1, 0.5)
dbeta(0.00000001, 0, 0.5)
dbeta(0.00000001, 0.5, 0.5)
dbeta(0, 0.5, 0.5)
dbeta(0, 1, 0.5)
dbeta(0, 1, 25)
seq(0, 1, 0.001)
plot(seq(0, 1, 0.001), dbeta(seq(0, 1, 0.01), 1, 25))
plot(seq(0, 1, 0.001), dbeta(seq(0, 1, 0.001), 1, 25))
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 25))
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 50))
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 500))
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 500))
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 500))
plot.new
plot.new()
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 500))
plot()
?plot
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 1), type = 'l')
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 5), type = 'l')
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 25), type = 'l')
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 0.5), type = 'l')
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 1), type = 'l')
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 5))
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 25))
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 25), type = 'l')
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 25), type = 'l')
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 50))
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 30))
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 15))
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 100))
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 100), type = 'l')
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 50))
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 40))
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 30))
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 25))
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 15))
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 10))
lines(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 1))
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 25), type = 'l')
plot(seq(0, 0.05, 0.001), -log10(seq(0, 0.05, 0.001)), type = 'l')
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 50), type = 'l')
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 100), type = 'l')
plot(seq(0, 0.05, 0.001), dbeta(seq(0, 0.05, 0.001), 1, 100)/100, type = 'l')
-10*log10(0.0000000001)
-10*log10(1/(8.6*1000000000))
96/(-10)
10^(96/(-10))
1-10^(96/(-10))
dbeta(0.5, 1, 25)
dbeta(0, 1, 25)
dbeta(1, 1, 25)
dbeta(0, 1, seq(0, 1000))
dbeta(0, 1, seq(0, 1000)) == seq(0, 1000)
FALSE %in% dbeta(0, 1, seq(0, 1000)) == seq(0, 1000)
dbeta(0, 1, seq(0, 1000)) == seq(0, 1000)
TRUE %in% (dbeta(0, 1, seq(0, 1000)) == seq(0, 1000))
FALSE %in% (dbeta(0, 1, seq(0, 1000)) == seq(0, 1000))
FALSE %in% (dbeta(0, 1, seq(0, 1000000)) == seq(0, 1000))
FALSE %in% (dbeta(0, 1, seq(0, 1000000)) == seq(0, 1000000))
install.packages("RMySQL")
library(RMySQL)
con <- dbConnect(MySQL(), user = "root", password = "ansl4u14eis42", dbname = "testdb", host = "localhost")
con <- dbConnect(MySQL(), user = "root", password = "ansl4u14eis42", dbname = "testdb", host = "localhost")
con <- dbConnect(MySQL(), user = "michael", password = "Fr#t2803", dbname = "testdb", host = "localhost")
rs <- dbSendQuery(con, "SELECT * FROM testtable;")
data <- fetch(rs, n = 10)
data
?fetch
exit
q()
install.packages("devtools")
devtools::install_github("MRCIEU/TwoSampleMR")
install.packages("mnormt")
devtools::install_github("MRCIEU/TwoSampleMR")
install.packages("devtools")
install.packages("devtools")
yes
install.packages("devtools")
devtools::install_github("MRCIEU/TwoSampleMR")
devtools::install_github("MRCIEU/TwoSampleMR")
install.packages("glmnet")
install.packages("gfortran")
install.packages("glmnet")
devtools::install_github("MRCIEU/TwoSampleMR")
devtools::install_github("MRCIEU/TwoSampleMR")
usethis::browse_github_pat()
usethis::edit_r_environ()
devtools::install_github("MRCIEU/TwoSampleMR")
library(TwoSampleMR)
plot(rnorm(100), rep(0, 100))
plot(rep(0, 100), rnorm(100))
x = rnorm(100)
y = 1.3 * x
plot(x, y)
install.packages("ggplot2")
df1 = data.frame(x = rnorm(100), y = rep(0, 100))
df2 = data.frame(x = rep(0, 100), y = rnorm(100))
df3 = data.frame(x = x, y = y)
df3
plot(df3)
plot(df1)
df = rbind(df1, df2, df3)
plot(df)
df1
df2
df3
df3 = data.frame(x = x, y = 1.1*x)
plot(rbind(df1, df2, df3))
df3 = data.frame(x = rnorm(100, y = 1.1*rnorm(100)))
df3 = data.frame(x = rnorm(100), y = 1.1*rnorm(100)))
df3 = data.frame(x = rnorm(100), y = 1.1*rnorm(100))
plot(df3)
df3 = data.frame(x = rnorm(100))
df3$y = 1.1*df3$x
plot(df3)
plot(rbind(df1, df2, df3))
ggplot(data = rbind(df1, df2, df3)) + geom_point(aes(x = x, y = y), position = "jitter")
library(ggplot2)
ggplot(data = rbind(df1, df2, df3)) + geom_point(aes(x = x, y = y), position = "jitter")
ggplot(data = rbind(df1, df2, df3)) + geom_jitter(aes(x = x, y = y))
df3$y = 0.5*df3$x
ggplot(data = rbind(df1, df2, df3)) + geom_jitter(aes(x = x, y = y))
df = rbind(df1, df2, df3)
df$col = c(rep(1, 200), rep(2, 100))
df
ggplot(data = rbind(df1, df2, df3)) + geom_jitter(aes(x = x, y = y, color = col))
ggplot(data = df) + geom_jitter(aes(x = x, y = y, color = col))
df$col = c(rep('one', 200), rep('two', 100))
ggplot(data = df) + geom_jitter(aes(x = x, y = y, color = col))
?write.table
?dist
q()
tmp <- data.frame(ctrl = rnorm(10000, 0, 1), cases = rnorm(10000, 1, 1))
tmp
tmp <- data.frame(value = c(rnorm(10000, 0, 1), rnorm(10000, 1, 1)), group = c(rep(0, 10000), rep(1, 10000)))
tmp
tail(tmp)
lm(value ~ group, tmp)
linmod = lm(value ~ group, tmp)
summary(linmod)
plot(tmp$group, tmp$value)
tmp <- data.frame(value = c(rnorm(10000, 0, 1), rnorm(10000, -1, 1)), group = c(rep(0, 10000), rep(1, 10000)))
linmod = lm(value ~ group, tmp)
summary(linmod)
setwd("~/onedrive/Documents/Projects/Rare Variant PES/rare_pes/R")
library(biomaRt)
options(scipen=999)
ensembl <- useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl', host = 'http://grch37.ensembl.org')
# get gene and transcript IDs, trancript type, gene name, chromosome and genomic coding start and end
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'transcript_biotype', 'external_gene_name', 'chromosome_name', 'genomic_coding_start', 'genomic_coding_end'), mart = ensembl)
chrs <- c(seq(1, 22), 'X', 'Y', 'MT')
chrs
bm.filt <- bm[bm$chromosome_name %in% chrs & !is.na(bm$genomic_coding_start) & !is.na(bm$genomic_coding_end) & bm$transcript_biotype == 'protein_coding', ]
# Also remove two erroneous gene entries (gene names are duplicated and are on different chromosomes):
# CKS1B on chr5 (real gene is on chr1)
# LSP1 on chr13 (real gene is on chr11)
bm.filt <- bm.filt[!(bm.filt$external_gene_name %in% c("CKS1B", "LSP1") & bm.filt$chromosome_name %in% c("5", "13")),]
bm.filt.sort <- bm.filt[order(bm.filt$ensembl_gene_id, bm.filt$genomic_coding_start), ]
head(bm.filt.sort)
# Merge overlapping exons
prevRow <- bm.filt.sort[1,]
bm.filt.sort.merge <- list()
listIdx = 1
head(bm.filt.sort)
for (i in 2:dim(bm.filt.sort)[1]) {
row <- bm.filt.sort[i,]
gene <- as.character(row[1])
prevGene <- as.character(prevRow[1])
chr <- as.character(row[7])
prevChr <- as.character(prevRow[7])
start <- as.numeric(row[8])
prevStart <- as.numeric(prevRow[8])
end <- as.numeric(row[9])
prevEnd <- as.numeric(prevRow[9])
if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end > prevEnd)) {
prevRow$genomic_coding_end <- end
next
} else if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end <= prevEnd)) {
next
} else {
bm.filt.sort.merge[[listIdx]] <- prevRow
listIdx = listIdx + 1
prevRow <- row
}
}
bm.filt.sort.merge[[listIdx]] <- prevRow
bm.filt.sort.merge <- do.call('rbind', bm.filt.sort.merge)
head(bm.filt.sort.merge)
# Make a data frame of gene name, chromosome, start and end positions
gene.genomic_coding <- data.frame(gene_name = bm.filt.sort.merge$ensembl_gene_id, chr = bm.filt.sort.merge$chromosome_name, start = bm.filt.sort.merge$genomic_coding_start, end = bm.filt.sort.merge$genomic_coding_end)
head(gene.genomic_coding)
plink.gene.genomic_coding <- gene.genomic_coding[c(2, 3, 4, 1)]
head(plink.gene.genomic_coding)
# Write to file
#write.table(gene.genomic_coding, "bm.exon.pos.txt", quote = FALSE, row.names = FALSE, col.names = FALSE, sep = '\t')
write.table(plink.gene.genomic_coding, "bm.exon.pos.ensembl.txt", quote = FALSE, row.names = FALSE, col.names = FALSE, sep = '\t')
