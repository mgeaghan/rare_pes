# get gene and transcript IDs, trancript type, gene name, chromosome and genomic coding start and end
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'transcript_biotype', 'external_gene_name', 'chromosome_name', 'genomic_coding_start', 'genomic_coding_end'), mart = ensembl)
bm2 <- getBM(attributes = c('ensembl_gene_id', 'hgnc_symbol'), mart = ensembl)
bm2 <- unique(bm2)
colnames(bm2) <- c("gene.ensembl", "gene.name")
bm2 <- bm2[bm2$gene.name != "",]
bm2 <- bm2[(!is.na(bm2$gene.ensembl)) & (!is.na(bm2$gene.name)),]
bm2 <- bm2[!(bm2$gene.ensembl %in% bm2$gene.ensembl[duplicated(bm2$gene.ensembl)]),]
rownames(bm2) <- bm2$gene.ensembl
chrs <- c(seq(1, 22), 'X', 'Y', 'MT')
chrs
bm.filt <- bm[bm$chromosome_name %in% chrs & !is.na(bm$genomic_coding_start) & !is.na(bm$genomic_coding_end) & bm$transcript_biotype == 'protein_coding', ]
# Also remove two erroneous gene entries (gene names are duplicated and are on different chromosomes):
# CKS1B on chr5 (real gene is on chr1)
# LSP1 on chr13 (real gene is on chr11)
bm.filt <- bm.filt[!(bm.filt$external_gene_name %in% c("CKS1B", "LSP1") & bm.filt$chromosome_name %in% c("5", "13")),]
bm.filt$gene.name <- bm2[bm.filt$ensembl_gene_id,]$gene.name
bm.filt <- bm.filt[!is.na(bm.filt$gene.name),]
bm.filt.sort <- bm.filt[order(bm.filt$gene.name, bm.filt$genomic_coding_start), ]
head(bm.filt.sort)
# Merge overlapping exons
prevRow <- bm.filt.sort[1,]
bm.filt.sort.merge <- list()
listIdx = 1
head(bm.filt.sort)
head(bm.filt.sort[10])
for (i in 2:dim(bm.filt.sort)[1]) {
row <- bm.filt.sort[i,]
gene <- as.character(row[10])
prevGene <- as.character(prevRow[10])
chr <- as.character(row[7])
prevChr <- as.character(prevRow[7])
start <- as.numeric(row[8])
prevStart <- as.numeric(prevRow[8])
end <- as.numeric(row[9])
prevEnd <- as.numeric(prevRow[9])
if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end > prevEnd)) {
prevRow$genomic_coding_end <- end
next
} else if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end <= prevEnd)) {
next
} else {
bm.filt.sort.merge[[listIdx]] <- prevRow
listIdx = listIdx + 1
prevRow <- row
}
}
bm.filt.sort.merge[[listIdx]] <- prevRow
bm.filt.sort.merge <- do.call('rbind', bm.filt.sort.merge)
head(bm.filt.sort.merge)
# Make a data frame of gene name, chromosome, start and end positions
gene.genomic_coding <- data.frame(gene_name = bm.filt.sort.merge$gene.name, chr = bm.filt.sort.merge$chromosome_name, start = bm.filt.sort.merge$genomic_coding_start, end = bm.filt.sort.merge$genomic_coding_end)
head(gene.genomic_coding)
plink.gene.genomic_coding <- gene.genomic_coding[c(2, 3, 4, 1)]
head(plink.gene.genomic_coding)
# Write to file
#write.table(gene.genomic_coding, "bm.exon.pos.txt", quote = FALSE, row.names = FALSE, col.names = FALSE, sep = '\t')
write.table(plink.gene.genomic_coding, "bm.exon.pos.txt", quote = FALSE, row.names = FALSE, col.names = FALSE, sep = '\t')
library(biomaRt)
options(scipen=999)
ensembl <- useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl', host = 'http://grch37.ensembl.org')
# get gene and transcript IDs, trancript type, gene name, chromosome and genomic coding start and end
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'transcript_biotype', 'external_gene_name', 'chromosome_name', 'genomic_coding_start', 'genomic_coding_end'), mart = ensembl)
bm2 <- getBM(attributes = c('ensembl_gene_id', 'hgnc_symbol'), mart = ensembl)
bm2 <- unique(bm2)
colnames(bm2) <- c("gene.ensembl", "gene.name")
bm2 <- bm2[bm2$gene.name != "",]
bm2 <- bm2[(!is.na(bm2$gene.ensembl)) & (!is.na(bm2$gene.name)),]
bm2 <- bm2[!(bm2$gene.ensembl %in% bm2$gene.ensembl[duplicated(bm2$gene.ensembl)]),]
rownames(bm2) <- bm2$gene.ensembl
chrs <- c(seq(1, 22), 'X', 'Y', 'MT')
chrs
bm.filt <- bm[bm$chromosome_name %in% chrs & !is.na(bm$genomic_coding_start) & !is.na(bm$genomic_coding_end), ]
# Also remove two erroneous gene entries (gene names are duplicated and are on different chromosomes):
# CKS1B on chr5 (real gene is on chr1)
# LSP1 on chr13 (real gene is on chr11)
bm.filt <- bm.filt[!(bm.filt$external_gene_name %in% c("CKS1B", "LSP1") & bm.filt$chromosome_name %in% c("5", "13")),]
bm.filt$gene.name <- bm2[bm.filt$ensembl_gene_id,]$gene.name
bm.filt <- bm.filt[!is.na(bm.filt$gene.name),]
bm.filt.sort <- bm.filt[order(bm.filt$gene.name, bm.filt$genomic_coding_start), ]
head(bm.filt.sort)
# Merge overlapping exons
prevRow <- bm.filt.sort[1,]
bm.filt.sort.merge <- list()
listIdx = 1
for (i in 2:dim(bm.filt.sort)[1]) {
row <- bm.filt.sort[i,]
gene <- as.character(row[10])
prevGene <- as.character(prevRow[10])
chr <- as.character(row[7])
prevChr <- as.character(prevRow[7])
start <- as.numeric(row[8])
prevStart <- as.numeric(prevRow[8])
end <- as.numeric(row[9])
prevEnd <- as.numeric(prevRow[9])
if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end > prevEnd)) {
prevRow$genomic_coding_end <- end
next
} else if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end <= prevEnd)) {
next
} else {
bm.filt.sort.merge[[listIdx]] <- prevRow
listIdx = listIdx + 1
prevRow <- row
}
}
bm.filt.sort.merge[[listIdx]] <- prevRow
bm.filt.sort.merge <- do.call('rbind', bm.filt.sort.merge)
head(bm.filt.sort.merge)
# Make a data frame of gene name, chromosome, start and end positions
gene.genomic_coding <- data.frame(gene_name = bm.filt.sort.merge$gene.name, chr = bm.filt.sort.merge$chromosome_name, start = bm.filt.sort.merge$genomic_coding_start, end = bm.filt.sort.merge$genomic_coding_end)
head(gene.genomic_coding)
plink.gene.genomic_coding <- gene.genomic_coding[c(2, 3, 4, 1)]
head(plink.gene.genomic_coding)
# Write to file
#write.table(gene.genomic_coding, "bm.exon.pos.txt", quote = FALSE, row.names = FALSE, col.names = FALSE, sep = '\t')
write.table(plink.gene.genomic_coding, "bm.exon.pos.txt", quote = FALSE, row.names = FALSE, col.names = FALSE, sep = '\t')
"DGCR8" %in% bm.filt.sort$gene.name
"DICER1" %in% bm.filt.sort$gene.name
"DICER1-AS1" %in% bm.filt.sort$gene.name
"MIR137HG" %in% bm.filt.sort$gene.name
tmp <- listAttributes(ensembl)
tmp[grepl("exon", tmp$description),]
tmp[grepl("[Ee]xon", tmp$description),]
library(biomaRt)
options(scipen=999)
ensembl <- useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl', host = 'http://grch37.ensembl.org')
# get gene and transcript IDs, trancript type, gene name, chromosome and genomic coding start and end
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'transcript_biotype', 'external_gene_name', 'chromosome_name', 'genomic_coding_start', 'genomic_coding_end', 'exon_chrom_start', 'exon_chrom_end'), mart = ensembl)
head(bm)
View(bm[bm$external_gene_name=="DICER1",])
tmp <- bm[bm$external_gene_name=="DICER1",]
View(tmp[order(tmp$ensembl_transcript_id, tmp$exon_chrom_start),])
library(biomaRt)
options(scipen=999)
ensembl <- useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl', host = 'http://grch37.ensembl.org')
# get gene and transcript IDs, trancript type, gene name, chromosome and genomic coding start and end
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'transcript_biotype', 'external_gene_name', 'chromosome_name', 'exon_chrom_start', 'exon_chrom_end'), mart = ensembl)
bm2 <- getBM(attributes = c('ensembl_gene_id', 'hgnc_symbol'), mart = ensembl)
bm2 <- unique(bm2)
colnames(bm2) <- c("gene.ensembl", "gene.name")
bm2 <- bm2[bm2$gene.name != "",]
bm2 <- bm2[(!is.na(bm2$gene.ensembl)) & (!is.na(bm2$gene.name)),]
bm2 <- bm2[!(bm2$gene.ensembl %in% bm2$gene.ensembl[duplicated(bm2$gene.ensembl)]),]
rownames(bm2) <- bm2$gene.ensembl
chrs <- c(seq(1, 22), 'X', 'Y', 'MT')
chrs
head(bm)
bm.filt <- bm[bm$chromosome_name %in% chrs & !is.na(bm$exon_chrom_start) & !is.na(bm$exon_chrom_end), ]
# Also remove two erroneous gene entries (gene names are duplicated and are on different chromosomes):
# CKS1B on chr5 (real gene is on chr1)
# LSP1 on chr13 (real gene is on chr11)
bm.filt <- bm.filt[!(bm.filt$external_gene_name %in% c("CKS1B", "LSP1") & bm.filt$chromosome_name %in% c("5", "13")),]
bm.filt$gene.name <- bm2[bm.filt$ensembl_gene_id,]$gene.name
bm.filt <- bm.filt[!is.na(bm.filt$gene.name),]
bm.filt.sort <- bm.filt[order(bm.filt$gene.name, bm.filt$exon_chrom_start), ]
head(bm.filt.sort)
table(bm.filt.sort$transcript_biotype)
library(biomaRt)
options(scipen=999)
ensembl <- useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl', host = 'http://grch37.ensembl.org')
# get gene and transcript IDs, trancript type, gene name, chromosome and genomic coding start and end
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'transcript_biotype', 'external_gene_name', 'chromosome_name', 'exon_chrom_start', 'exon_chrom_end'), mart = ensembl)
bm2 <- getBM(attributes = c('ensembl_gene_id', 'hgnc_symbol'), mart = ensembl)
bm2 <- unique(bm2)
colnames(bm2) <- c("gene.ensembl", "gene.name")
bm2 <- bm2[bm2$gene.name != "",]
bm2 <- bm2[(!is.na(bm2$gene.ensembl)) & (!is.na(bm2$gene.name)),]
bm2 <- bm2[!(bm2$gene.ensembl %in% bm2$gene.ensembl[duplicated(bm2$gene.ensembl)]),]
rownames(bm2) <- bm2$gene.ensembl
chrs <- c(seq(1, 22), 'X', 'Y', 'MT')
chrs
table(bm$transcript_biotype)
bm.filt <- bm[bm$chromosome_name %in% chrs & !is.na(bm$exon_chrom_start) & !is.na(bm$exon_chrom_end) & !(bm.filt$transcript_biotype %in% c("retained_intron", "sense_intronic")), ]
bm.filt <- bm[bm$chromosome_name %in% chrs & !is.na(bm$exon_chrom_start) & !is.na(bm$exon_chrom_end) & !(bm$transcript_biotype %in% c("retained_intron", "sense_intronic")), ]
table(bm.filt$transcript_biotype)
bm.filt <- bm.filt[!(bm.filt$external_gene_name %in% c("CKS1B", "LSP1") & bm.filt$chromosome_name %in% c("5", "13")),]
bm.filt$gene.name <- bm2[bm.filt$ensembl_gene_id,]$gene.name
bm.filt <- bm.filt[!is.na(bm.filt$gene.name),]
bm.filt.sort <- bm.filt[order(bm.filt$gene.name, bm.filt$exon_chrom_start), ]
head(bm.filt.sort)
head(bm.filt.sort)
head(bm.filt.sort[10])
head(bm.filt.sort[c(7,8,9,10)])
prevRow <- bm.filt.sort[1,]
bm.filt.sort.merge <- list()
listIdx = 1
for (i in 2:dim(bm.filt.sort)[1]) {
row <- bm.filt.sort[i,]
gene <- as.character(row[10])
prevGene <- as.character(prevRow[10])
chr <- as.character(row[7])
prevChr <- as.character(prevRow[7])
start <- as.numeric(row[8])
prevStart <- as.numeric(prevRow[8])
end <- as.numeric(row[9])
prevEnd <- as.numeric(prevRow[9])
if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end > prevEnd)) {
prevRow$exon_chrom_end <- end
next
} else if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end <= prevEnd)) {
next
} else {
bm.filt.sort.merge[[listIdx]] <- prevRow
listIdx = listIdx + 1
prevRow <- row
}
}
bm.filt.sort.merge[[listIdx]] <- prevRow
bm.filt.sort.merge <- do.call('rbind', bm.filt.sort.merge)
head(bm.filt.sort.merge)
gene.exon_chrom <- data.frame(gene_name = bm.filt.sort.merge$gene.name, chr = bm.filt.sort.merge$chromosome_name, start = bm.filt.sort.merge$exon_chrom_start, end = bm.filt.sort.merge$exon_chrom_end)
head(gene.exon_chrom)
plink.gene.exon_chrom <- gene.exon_chrom[c(2, 3, 4, 1)]
head(plink.gene.exon_chrom)
# Write to file
#write.table(gene.exon_chrom, "bm.exon.pos.txt", quote = FALSE, row.names = FALSE, col.names = FALSE, sep = '\t')
write.table(plink.gene.exon_chrom, "bm.exon.pos.txt", quote = FALSE, row.names = FALSE, col.names = FALSE, sep = '\t')
library(biomaRt)
ensembl <- useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl', host = 'http://grch37.ensembl.org')
# get gene and transcript IDs, trancript type, gene name, chromosome and genomic coding start and end
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'transcript_biotype', 'external_gene_name', 'chromosome_name', 'exon_chrom_start', 'exon_chrom_end'), mart = ensembl)
bm2 <- getBM(attributes = c('ensembl_gene_id', 'hgnc_symbol'), mart = ensembl)
bm2 <- unique(bm2)
colnames(bm2) <- c("gene.ensembl", "gene.name")
bm2 <- bm2[bm2$gene.name != "",]
bm2 <- bm2[(!is.na(bm2$gene.ensembl)) & (!is.na(bm2$gene.name)),]
bm2 <- bm2[!(bm2$gene.ensembl %in% bm2$gene.ensembl[duplicated(bm2$gene.ensembl)]),]
rownames(bm2) <- bm2$gene.ensembl
chrs <- c(seq(1, 22), 'X', 'Y', 'MT')
chrs
bm.filt <- bm[bm$chromosome_name %in% chrs & !is.na(bm$exon_chrom_start) & !is.na(bm$exon_chrom_end) & !(bm$transcript_biotype %in% c("retained_intron", "sense_intronic")), ]
# Also remove two erroneous gene entries (gene names are duplicated and are on different chromosomes):
# CKS1B on chr5 (real gene is on chr1)
# LSP1 on chr13 (real gene is on chr11)
bm.filt <- bm.filt[!(bm.filt$external_gene_name %in% c("CKS1B", "LSP1") & bm.filt$chromosome_name %in% c("5", "13")),]
bm.filt$gene.name <- bm2[bm.filt$ensembl_gene_id,]$gene.name
bm.filt <- bm.filt[!is.na(bm.filt$gene.name),]
bm.filt.sort <- bm.filt[order(bm.filt$gene.name, bm.filt$exon_chrom_start), ]
head(bm.filt.sort)
# Merge overlapping exons
prevRow <- bm.filt.sort[1,]
bm.filt.sort.merge <- list()
listIdx = 1
for (i in 2:dim(bm.filt.sort)[1]) {
row <- bm.filt.sort[i,]
gene <- as.character(row[10])
prevGene <- as.character(prevRow[10])
chr <- as.character(row[7])
prevChr <- as.character(prevRow[7])
start <- as.numeric(row[8])
prevStart <- as.numeric(prevRow[8])
end <- as.numeric(row[9])
prevEnd <- as.numeric(prevRow[9])
if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end > prevEnd)) {
prevRow$exon_chrom_end <- end
next
} else if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end <= prevEnd)) {
next
} else {
bm.filt.sort.merge[[listIdx]] <- prevRow
listIdx = listIdx + 1
prevRow <- row
}
}
bm.filt.sort.merge[[listIdx]] <- prevRow
bm.filt.sort.merge <- do.call('rbind', bm.filt.sort.merge)
head(bm.filt.sort.merge)
# Get exon union lengths
bm.filt.sort.merge$exon_chrom_len <- bm.filt.sort.merge$exon_chrom_end - (bm.filt.sort.merge$exon_chrom_start - 1)
gene.list <- unique(bm.filt.sort.merge$gene.name)
gene.exon_chrom.len <- data.frame(gene_name = gene.list)
gene.exon_chrom.len$len <- do.call('c', lapply(gene.list, function(x) sum(bm.filt.sort.merge$exon_chrom_len[bm.filt.sort.merge$gene.name == x])))
head(gene.exon_chrom.len)
# Write to file
write.table(gene.exon_chrom.len, "bm.exon.union.length.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = '\t')
library(biomaRt)
ensembl <- useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl', host = 'http://grch37.ensembl.org')
# get gene and transcript IDs, trancript type, gene name, chromosome and genomic coding start and end
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'transcript_biotype', 'external_gene_name', 'chromosome_name', 'genomic_coding_start', 'genomic_coding_end'), mart = ensembl)
bm2 <- getBM(attributes = c('ensembl_gene_id', 'hgnc_symbol'), mart = ensembl)
bm2 <- unique(bm2)
colnames(bm2) <- c("gene.ensembl", "gene.name")
bm2 <- bm2[bm2$gene.name != "",]
bm2 <- bm2[(!is.na(bm2$gene.ensembl)) & (!is.na(bm2$gene.name)),]
bm2 <- bm2[!(bm2$gene.ensembl %in% bm2$gene.ensembl[duplicated(bm2$gene.ensembl)]),]
rownames(bm2) <- bm2$gene.ensembl
chrs <- c(seq(1, 22), 'X', 'Y', 'MT')
chrs
bm.filt <- bm[bm$chromosome_name %in% chrs & !is.na(bm$genomic_coding_start) & !is.na(bm$genomic_coding_end) & bm$transcript_biotype == 'protein_coding', ]
# Also remove two erroneous gene entries (gene names are duplicated and are on different chromosomes):
# CKS1B on chr5 (real gene is on chr1)
# LSP1 on chr13 (real gene is on chr11)
bm.filt <- bm.filt[!(bm.filt$external_gene_name %in% c("CKS1B", "LSP1") & bm.filt$chromosome_name %in% c("5", "13")),]
bm.filt$gene.name <- bm2[bm.filt$ensembl_gene_id,]$gene.name
bm.filt <- bm.filt[!is.na(bm.filt$gene.name),]
bm.filt.sort <- bm.filt[order(bm.filt$gene.name, bm.filt$genomic_coding_start), ]
head(bm.filt.sort)
# Merge overlapping exons
prevRow <- bm.filt.sort[1,]
bm.filt.sort.merge <- list()
listIdx = 1
for (i in 2:dim(bm.filt.sort)[1]) {
row <- bm.filt.sort[i,]
gene <- as.character(row[10])
prevGene <- as.character(prevRow[10])
chr <- as.character(row[7])
prevChr <- as.character(prevRow[7])
start <- as.numeric(row[8])
prevStart <- as.numeric(prevRow[8])
end <- as.numeric(row[9])
prevEnd <- as.numeric(prevRow[9])
if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end > prevEnd)) {
prevRow$genomic_coding_end <- end
next
} else if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end <= prevEnd)) {
next
} else {
bm.filt.sort.merge[[listIdx]] <- prevRow
listIdx = listIdx + 1
prevRow <- row
}
}
bm.filt.sort.merge[[listIdx]] <- prevRow
bm.filt.sort.merge <- do.call('rbind', bm.filt.sort.merge)
head(bm.filt.sort.merge)
# Get exon union lengths
bm.filt.sort.merge$genomic_coding_len <- bm.filt.sort.merge$genomic_coding_end - (bm.filt.sort.merge$genomic_coding_start - 1)
gene.list <- unique(bm.filt.sort.merge$gene.name)
gene.genomic_coding.len <- data.frame(gene_name = gene.list)
gene.genomic_coding.len$len <- do.call('c', lapply(gene.list, function(x) sum(bm.filt.sort.merge$genomic_coding_len[bm.filt.sort.merge$gene.name == x])))
head(gene.genomic_coding.len)
# Write to file
write.table(gene.genomic_coding.len, "bm.exon.union.length.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = '\t')
library(biomaRt)
ensembl <- useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl', host = 'http://grch37.ensembl.org')
# get gene and transcript IDs, trancript type, gene name, chromosome and genomic coding start and end
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'transcript_biotype', 'external_gene_name', 'chromosome_name', 'genomic_coding_start', 'genomic_coding_end'), mart = ensembl)
bm2 <- getBM(attributes = c('ensembl_gene_id', 'hgnc_symbol'), mart = ensembl)
bm2 <- unique(bm2)
colnames(bm2) <- c("gene.ensembl", "gene.name")
bm2 <- bm2[bm2$gene.name != "",]
bm2 <- bm2[(!is.na(bm2$gene.ensembl)) & (!is.na(bm2$gene.name)),]
bm2 <- bm2[!(bm2$gene.ensembl %in% bm2$gene.ensembl[duplicated(bm2$gene.ensembl)]),]
rownames(bm2) <- bm2$gene.ensembl
# chrs <- c(seq(1, 22), 'X', 'Y', 'MT')
chrs <- c(seq(1, 22))
chrs
bm.filt <- bm[bm$chromosome_name %in% chrs & !is.na(bm$genomic_coding_start) & !is.na(bm$genomic_coding_end) & bm$transcript_biotype == 'protein_coding', ]
# Also remove two erroneous gene entries (gene names are duplicated and are on different chromosomes):
# CKS1B on chr5 (real gene is on chr1)
# LSP1 on chr13 (real gene is on chr11)
bm.filt <- bm.filt[!(bm.filt$external_gene_name %in% c("CKS1B", "LSP1") & bm.filt$chromosome_name %in% c("5", "13")),]
bm.filt$gene.name <- bm2[bm.filt$ensembl_gene_id,]$gene.name
bm.filt <- bm.filt[!is.na(bm.filt$gene.name),]
bm.filt.sort <- bm.filt[order(bm.filt$gene.name, bm.filt$genomic_coding_start), ]
head(bm.filt.sort)
# Merge overlapping exons
prevRow <- bm.filt.sort[1,]
bm.filt.sort.merge <- list()
listIdx = 1
for (i in 2:dim(bm.filt.sort)[1]) {
row <- bm.filt.sort[i,]
gene <- as.character(row[10])
prevGene <- as.character(prevRow[10])
chr <- as.character(row[7])
prevChr <- as.character(prevRow[7])
start <- as.numeric(row[8])
prevStart <- as.numeric(prevRow[8])
end <- as.numeric(row[9])
prevEnd <- as.numeric(prevRow[9])
if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end > prevEnd)) {
prevRow$genomic_coding_end <- end
next
} else if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end <= prevEnd)) {
next
} else {
bm.filt.sort.merge[[listIdx]] <- prevRow
listIdx = listIdx + 1
prevRow <- row
}
}
bm.filt.sort.merge[[listIdx]] <- prevRow
bm.filt.sort.merge <- do.call('rbind', bm.filt.sort.merge)
head(bm.filt.sort.merge)
# Get exon union lengths
bm.filt.sort.merge$genomic_coding_len <- bm.filt.sort.merge$genomic_coding_end - (bm.filt.sort.merge$genomic_coding_start - 1)
gene.list <- unique(bm.filt.sort.merge$gene.name)
gene.genomic_coding.len <- data.frame(gene_name = gene.list)
gene.genomic_coding.len$len <- do.call('c', lapply(gene.list, function(x) sum(bm.filt.sort.merge$genomic_coding_len[bm.filt.sort.merge$gene.name == x])))
head(gene.genomic_coding.len)
# Write to file
write.table(gene.genomic_coding.len, "bm.exon.union.length.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = '\t')
library(biomaRt)
ensembl <- useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl', host = 'http://grch37.ensembl.org')
# get gene and transcript IDs, trancript type, gene name, chromosome and genomic coding start and end
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'transcript_biotype', 'external_gene_name', 'chromosome_name', 'genomic_coding_start', 'genomic_coding_end'), mart = ensembl)
bm2 <- getBM(attributes = c('ensembl_gene_id', 'hgnc_symbol'), mart = ensembl)
bm2 <- unique(bm2)
colnames(bm2) <- c("gene.ensembl", "gene.name")
bm2 <- bm2[bm2$gene.name != "",]
bm2 <- bm2[(!is.na(bm2$gene.ensembl)) & (!is.na(bm2$gene.name)),]
bm2 <- bm2[!(bm2$gene.ensembl %in% bm2$gene.ensembl[duplicated(bm2$gene.ensembl)]),]
rownames(bm2) <- bm2$gene.ensembl
# chrs <- c(seq(1, 22), 'X', 'Y', 'MT')
chrs <- c(seq(1, 22))
chrs
bm.filt <- bm[bm$chromosome_name %in% chrs & !is.na(bm$genomic_coding_start) & !is.na(bm$genomic_coding_end) & bm$transcript_biotype == 'protein_coding', ]
# Also remove two erroneous gene entries (gene names are duplicated and are on different chromosomes):
# CKS1B on chr5 (real gene is on chr1)
# LSP1 on chr13 (real gene is on chr11)
bm.filt <- bm.filt[!(bm.filt$external_gene_name %in% c("CKS1B", "LSP1") & bm.filt$chromosome_name %in% c("5", "13")),]
bm.filt$gene.name <- bm2[bm.filt$ensembl_gene_id,]$gene.name
bm.filt <- bm.filt[!is.na(bm.filt$gene.name),]
bm.filt.sort <- bm.filt[order(bm.filt$gene.name, bm.filt$genomic_coding_start), ]
head(bm.filt.sort)
# Merge overlapping exons
prevRow <- bm.filt.sort[1,]
bm.filt.sort.merge <- list()
listIdx = 1
for (i in 2:dim(bm.filt.sort)[1]) {
row <- bm.filt.sort[i,]
gene <- as.character(row[10])
prevGene <- as.character(prevRow[10])
chr <- as.character(row[7])
prevChr <- as.character(prevRow[7])
start <- as.numeric(row[8])
prevStart <- as.numeric(prevRow[8])
end <- as.numeric(row[9])
prevEnd <- as.numeric(prevRow[9])
if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end > prevEnd)) {
prevRow$genomic_coding_end <- end
next
} else if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end <= prevEnd)) {
next
} else {
bm.filt.sort.merge[[listIdx]] <- prevRow
listIdx = listIdx + 1
prevRow <- row
}
}
bm.filt.sort.merge[[listIdx]] <- prevRow
bm.filt.sort.merge <- do.call('rbind', bm.filt.sort.merge)
head(bm.filt.sort.merge)
# Get exon union lengths
bm.filt.sort.merge$genomic_coding_len <- bm.filt.sort.merge$genomic_coding_end - (bm.filt.sort.merge$genomic_coding_start - 1)
gene.list <- unique(bm.filt.sort.merge$gene.name)
gene.genomic_coding.len <- data.frame(gene_name = gene.list)
gene.genomic_coding.len$len <- do.call('c', lapply(gene.list, function(x) sum(bm.filt.sort.merge$genomic_coding_len[bm.filt.sort.merge$gene.name == x])))
head(gene.genomic_coding.len)
# Write to file
write.table(gene.genomic_coding.len, "bm.exon.union.length.txt", quote = FALSE, row.names = FALSE, col.names = TRUE, sep = '\t')
library(biomaRt)
options(scipen=999)
ensembl <- useMart('ENSEMBL_MART_ENSEMBL', 'hsapiens_gene_ensembl', host = 'http://grch37.ensembl.org')
# get gene and transcript IDs, trancript type, gene name, chromosome and genomic coding start and end
bm <- getBM(attributes = c('ensembl_gene_id', 'ensembl_transcript_id', 'ensembl_gene_id_version', 'ensembl_transcript_id_version', 'transcript_biotype', 'external_gene_name', 'chromosome_name', 'genomic_coding_start', 'genomic_coding_end'), mart = ensembl)
bm2 <- getBM(attributes = c('ensembl_gene_id', 'hgnc_symbol'), mart = ensembl)
bm2 <- unique(bm2)
colnames(bm2) <- c("gene.ensembl", "gene.name")
bm2 <- bm2[bm2$gene.name != "",]
bm2 <- bm2[(!is.na(bm2$gene.ensembl)) & (!is.na(bm2$gene.name)),]
bm2 <- bm2[!(bm2$gene.ensembl %in% bm2$gene.ensembl[duplicated(bm2$gene.ensembl)]),]
rownames(bm2) <- bm2$gene.ensembl
# chrs <- c(seq(1, 22), 'X', 'Y', 'MT')
chrs <- c(seq(1, 22))
chrs
bm.filt <- bm[bm$chromosome_name %in% chrs & !is.na(bm$genomic_coding_start) & !is.na(bm$genomic_coding_end) & bm$transcript_biotype == 'protein_coding', ]
# Also remove two erroneous gene entries (gene names are duplicated and are on different chromosomes):
# CKS1B on chr5 (real gene is on chr1)
# LSP1 on chr13 (real gene is on chr11)
bm.filt <- bm.filt[!(bm.filt$external_gene_name %in% c("CKS1B", "LSP1") & bm.filt$chromosome_name %in% c("5", "13")),]
bm.filt$gene.name <- bm2[bm.filt$ensembl_gene_id,]$gene.name
bm.filt <- bm.filt[!is.na(bm.filt$gene.name),]
bm.filt.sort <- bm.filt[order(bm.filt$gene.name, bm.filt$genomic_coding_start), ]
head(bm.filt.sort)
# Merge overlapping exons
prevRow <- bm.filt.sort[1,]
bm.filt.sort.merge <- list()
listIdx = 1
for (i in 2:dim(bm.filt.sort)[1]) {
row <- bm.filt.sort[i,]
gene <- as.character(row[10])
prevGene <- as.character(prevRow[10])
chr <- as.character(row[7])
prevChr <- as.character(prevRow[7])
start <- as.numeric(row[8])
prevStart <- as.numeric(prevRow[8])
end <- as.numeric(row[9])
prevEnd <- as.numeric(prevRow[9])
if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end > prevEnd)) {
prevRow$genomic_coding_end <- end
next
} else if ((chr == prevChr) && (gene == prevGene) && (start >= prevStart) && (start <= prevEnd) && (end <= prevEnd)) {
next
} else {
bm.filt.sort.merge[[listIdx]] <- prevRow
listIdx = listIdx + 1
prevRow <- row
}
}
bm.filt.sort.merge[[listIdx]] <- prevRow
bm.filt.sort.merge <- do.call('rbind', bm.filt.sort.merge)
head(bm.filt.sort.merge)
# Make a data frame of gene name, chromosome, start and end positions
gene.genomic_coding <- data.frame(gene_name = bm.filt.sort.merge$gene.name, chr = bm.filt.sort.merge$chromosome_name, start = bm.filt.sort.merge$genomic_coding_start, end = bm.filt.sort.merge$genomic_coding_end)
head(gene.genomic_coding)
plink.gene.genomic_coding <- gene.genomic_coding[c(2, 3, 4, 1)]
head(plink.gene.genomic_coding)
# Write to file
#write.table(gene.genomic_coding, "bm.exon.pos.txt", quote = FALSE, row.names = FALSE, col.names = FALSE, sep = '\t')
write.table(plink.gene.genomic_coding, "bm.exon.pos.txt", quote = FALSE, row.names = FALSE, col.names = FALSE, sep = '\t')
